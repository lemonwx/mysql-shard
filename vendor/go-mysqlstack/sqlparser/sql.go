//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const ADD = 57437
const MODIFY = 57438
const TABLE = 57439
const INDEX = 57440
const VIEW = 57441
const TO = 57442
const IGNORE = 57443
const IF = 57444
const UNIQUE = 57445
const USING = 57446
const PRIMARY = 57447
const COLUMN = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const BIT = 57457
const TINYINT = 57458
const SMALLINT = 57459
const MEDIUMINT = 57460
const INT = 57461
const INTEGER = 57462
const BIGINT = 57463
const INTNUM = 57464
const REAL = 57465
const DOUBLE = 57466
const FLOAT_TYPE = 57467
const DECIMAL = 57468
const NUMERIC = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const CHARSET = 57480
const TEXT = 57481
const TINYTEXT = 57482
const MEDIUMTEXT = 57483
const LONGTEXT = 57484
const BLOB = 57485
const TINYBLOB = 57486
const MEDIUMBLOB = 57487
const LONGBLOB = 57488
const JSON = 57489
const ENUM = 57490
const NULLX = 57491
const AUTO_INCREMENT = 57492
const APPROXNUM = 57493
const SIGNED = 57494
const UNSIGNED = 57495
const ZEROFILL = 57496
const DATABASES = 57497
const TABLES = 57498
const VITESS_KEYSPACES = 57499
const VITESS_SHARDS = 57500
const VSCHEMA_TABLES = 57501
const WARNINGS = 57502
const VARIABLES = 57503
const EVENTS = 57504
const BINLOG = 57505
const GTID = 57506
const CURRENT_TIMESTAMP = 57507
const DATABASE = 57508
const CURRENT_DATE = 57509
const CURRENT_TIME = 57510
const LOCALTIME = 57511
const LOCALTIMESTAMP = 57512
const UTC_DATE = 57513
const UTC_TIME = 57514
const UTC_TIMESTAMP = 57515
const REPLACE = 57516
const CONVERT = 57517
const CAST = 57518
const GROUP_CONCAT = 57519
const SEPARATOR = 57520
const MATCH = 57521
const AGAINST = 57522
const BOOLEAN = 57523
const LANGUAGE = 57524
const WITH = 57525
const QUERY = 57526
const EXPANSION = 57527
const UNUSED = 57528
const PARTITION = 57529
const PARTITIONS = 57530
const HASH = 57531
const XA = 57532
const ENGINES = 57533
const STATUS = 57534
const VERSIONS = 57535
const PROCESSLIST = 57536
const QUERYZ = 57537
const TXNZ = 57538
const KILL = 57539
const START = 57540
const TRANSACTION = 57541
const COMMIT = 57542
const SESSION = 57543
const ENGINE = 57544

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"STATUS",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"START",
	"TRANSACTION",
	"COMMIT",
	"SESSION",
	"ENGINE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 343,
	104, 446,
	-2, 442,
	-1, 344,
	104, 447,
	-2, 443,
	-1, 507,
	5, 25,
	-2, 399,
	-1, 635,
	104, 449,
	-2, 445,
	-1, 748,
	5, 26,
	-2, 278,
	-1, 772,
	5, 26,
	-2, 400,
	-1, 855,
	5, 25,
	-2, 402,
	-1, 957,
	5, 26,
	-2, 403,
}

const yyPrivate = 57344

const yyLast = 5846

var yyAct = [...]int{

	344, 630, 985, 464, 846, 910, 297, 510, 321, 666,
	787, 558, 632, 845, 896, 243, 706, 667, 299, 825,
	520, 907, 740, 628, 545, 618, 732, 511, 60, 50,
	262, 663, 647, 531, 80, 232, 696, 633, 286, 346,
	595, 352, 295, 554, 252, 709, 284, 625, 49, 525,
	322, 44, 54, 236, 522, 260, 997, 984, 232, 319,
	996, 976, 994, 983, 975, 838, 890, 277, 59, 463,
	3, 232, 232, 67, 68, 583, 56, 57, 58, 79,
	281, 962, 430, 429, 439, 440, 432, 433, 434, 435,
	436, 437, 438, 431, 692, 44, 441, 538, 791, 22,
	45, 24, 25, 248, 233, 234, 64, 63, 237, 238,
	239, 240, 241, 681, 242, 476, 861, 40, 810, 546,
	885, 930, 26, 883, 826, 721, 720, 719, 952, 954,
	270, 265, 66, 575, 718, 972, 278, 533, 751, 971,
	34, 275, 69, 47, 279, 280, 714, 574, 533, 828,
	970, 268, 716, 418, 417, 868, 71, 70, 453, 454,
	917, 875, 775, 686, 746, 830, 539, 834, 744, 829,
	419, 827, 577, 676, 263, 62, 832, 462, 359, 697,
	431, 573, 602, 441, 800, 441, 831, 851, 416, 753,
	417, 833, 835, 418, 417, 963, 600, 601, 599, 953,
	28, 29, 30, 419, 32, 919, 419, 840, 752, 784,
	419, 717, 491, 492, 682, 675, 974, 33, 41, 36,
	546, 648, 42, 43, 31, 532, 269, 570, 568, 564,
	402, 567, 569, 801, 418, 417, 532, 418, 417, 690,
	715, 530, 713, 529, 842, 257, 289, 347, 869, 264,
	867, 419, 65, 922, 419, 418, 417, 232, 273, 274,
	232, 535, 648, 354, 758, 232, 536, 421, 232, 232,
	232, 572, 419, 232, 872, 871, 348, 232, 232, 232,
	588, 590, 591, 862, 46, 589, 571, 434, 435, 436,
	437, 438, 431, 422, 705, 441, 272, 704, 693, 44,
	35, 420, 350, 235, 282, 283, 960, 37, 38, 256,
	39, 566, 933, 451, 267, 47, 418, 417, 349, 725,
	726, 727, 576, 870, 465, 598, 627, 792, 793, 794,
	619, 474, 620, 419, 723, 795, 703, 959, 565, 991,
	285, 894, 285, 285, 450, 452, 311, 310, 312, 313,
	314, 315, 501, 927, 263, 316, 812, 232, 864, 863,
	232, 738, 285, 926, 493, 512, 809, 799, 320, 789,
	461, 806, 805, 466, 467, 468, 469, 470, 471, 472,
	785, 475, 477, 477, 477, 477, 477, 477, 477, 477,
	485, 486, 487, 488, 526, 495, 494, 515, 803, 802,
	547, 548, 549, 230, 232, 517, 508, 781, 687, 232,
	621, 497, 560, 774, 285, 637, 285, 20, 513, 585,
	586, 271, 592, 593, 266, 507, 258, 363, 362, 582,
	925, 796, 51, 596, 22, 664, 767, 674, 637, 258,
	258, 556, 557, 597, 357, 674, 770, 360, 478, 479,
	480, 481, 482, 483, 484, 404, 405, 406, 894, 854,
	22, 501, 521, 804, 410, 411, 412, 738, 465, 738,
	247, 642, 643, 489, 249, 22, 501, 738, 47, 579,
	580, 581, 432, 433, 434, 435, 436, 437, 438, 431,
	47, 347, 441, 540, 559, 61, 622, 623, 505, 683,
	506, 966, 674, 44, 47, 555, 550, 664, 635, 501,
	636, 638, 512, 665, 645, 668, 408, 466, 47, 47,
	624, 403, 634, 678, 650, 945, 989, 503, 943, 655,
	946, 673, 656, 944, 652, 649, 639, 541, 542, 543,
	544, 969, 968, 947, 509, 902, 903, 942, 982, 941,
	677, 724, 551, 552, 553, 253, 254, 669, 584, 44,
	661, 353, 660, 501, 685, 513, 694, 695, 672, 287,
	768, 873, 698, 679, 351, 708, 358, 783, 670, 561,
	689, 288, 924, 923, 699, 700, 701, 852, 684, 407,
	906, 562, 250, 251, 353, 244, 578, 429, 439, 440,
	432, 433, 434, 435, 436, 437, 438, 431, 596, 659,
	441, 936, 361, 707, 935, 245, 51, 658, 597, 893,
	521, 414, 634, 276, 55, 258, 259, 914, 258, 415,
	53, 501, 710, 401, 48, 1, 258, 258, 258, 747,
	728, 409, 786, 528, 523, 258, 258, 258, 261, 527,
	759, 722, 702, 898, 901, 902, 903, 899, 232, 900,
	904, 866, 790, 967, 534, 691, 537, 680, 735, 524,
	782, 465, 736, 921, 688, 366, 367, 778, 365, 757,
	369, 512, 368, 745, 501, 364, 748, 749, 750, 779,
	742, 754, 72, 780, 905, 909, 760, 769, 761, 762,
	763, 764, 777, 776, 898, 901, 902, 903, 899, 739,
	900, 904, 232, 712, 292, 711, 771, 772, 773, 563,
	449, 657, 635, 671, 490, 258, 345, 514, 516, 934,
	892, 797, 798, 756, 513, 473, 634, 646, 298, 587,
	309, 306, 501, 788, 308, 307, 496, 501, 811, 504,
	423, 296, 813, 290, 951, 848, 814, 355, 897, 824,
	841, 895, 819, 847, 820, 766, 413, 889, 232, 961,
	502, 23, 258, 837, 52, 501, 501, 258, 836, 668,
	255, 808, 822, 19, 818, 839, 849, 843, 853, 844,
	635, 14, 859, 823, 640, 641, 13, 12, 644, 27,
	10, 742, 9, 8, 634, 7, 634, 6, 5, 4,
	246, 21, 651, 2, 653, 654, 18, 17, 850, 16,
	15, 669, 11, 0, 856, 0, 0, 0, 860, 662,
	631, 516, 0, 0, 857, 858, 631, 631, 0, 0,
	631, 0, 881, 855, 891, 765, 0, 0, 0, 0,
	0, 232, 232, 0, 631, 631, 631, 631, 0, 0,
	0, 501, 0, 668, 915, 501, 0, 0, 0, 849,
	876, 631, 877, 708, 514, 920, 501, 918, 0, 0,
	0, 0, 0, 886, 887, 0, 0, 0, 824, 888,
	0, 0, 0, 0, 0, 232, 232, 232, 232, 807,
	938, 908, 940, 0, 929, 669, 232, 44, 937, 232,
	939, 707, 232, 849, 849, 849, 849, 955, 501, 948,
	634, 512, 956, 0, 788, 0, 916, 849, 0, 0,
	0, 0, 0, 0, 0, 634, 932, 964, 465, 0,
	965, 0, 0, 0, 0, 850, 850, 850, 850, 0,
	0, 0, 0, 737, 950, 865, 0, 0, 0, 908,
	0, 0, 0, 957, 0, 0, 0, 0, 977, 978,
	0, 0, 755, 0, 513, 0, 0, 958, 639, 0,
	501, 501, 501, 987, 988, 0, 0, 0, 0, 0,
	0, 0, 501, 878, 879, 631, 880, 0, 0, 882,
	0, 884, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 631, 455, 456, 457, 458, 459,
	460, 979, 980, 981, 0, 0, 258, 0, 0, 0,
	0, 0, 990, 0, 992, 993, 0, 0, 0, 986,
	986, 986, 0, 514, 0, 516, 0, 0, 0, 0,
	0, 995, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 741, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 194, 0, 0, 209, 200, 0,
	258, 0, 430, 429, 439, 440, 432, 433, 434, 435,
	436, 437, 438, 431, 0, 500, 441, 743, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 631, 418, 417,
	0, 0, 0, 516, 631, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 594, 0,
	0, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 0, 0, 223, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 181,
	0, 208, 204, 218, 176, 216, 211, 198, 190, 191,
	175, 0, 207, 184, 189, 183, 202, 213, 214, 182,
	228, 179, 222, 178, 0, 221, 201, 0, 212, 217,
	199, 196, 177, 215, 197, 195, 192, 186, 0, 0,
	0, 210, 219, 229, 0, 0, 224, 225, 226, 258,
	912, 0, 0, 0, 0, 0, 815, 0, 439, 440,
	432, 433, 434, 435, 436, 437, 438, 431, 0, 174,
	441, 193, 227, 206, 188, 220, 430, 429, 439, 440,
	432, 433, 434, 435, 436, 437, 438, 431, 0, 0,
	441, 187, 0, 258, 258, 258, 258, 0, 0, 0,
	0, 0, 0, 0, 949, 0, 425, 258, 428, 0,
	912, 0, 0, 514, 442, 443, 444, 445, 446, 447,
	448, 0, 426, 427, 424, 430, 429, 439, 440, 432,
	433, 434, 435, 436, 437, 438, 431, 0, 0, 441,
	0, 0, 0, 0, 0, 729, 730, 731, 430, 429,
	439, 440, 432, 433, 434, 435, 436, 437, 438, 431,
	0, 0, 441, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 151, 123, 164, 100, 115, 173, 116, 117,
	143, 87, 131, 203, 113, 0, 103, 82, 110, 83,
	101, 125, 185, 128, 99, 153, 134, 170, 194, 138,
	0, 209, 200, 0, 0, 127, 156, 129, 150, 122,
	144, 93, 137, 165, 114, 141, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 140,
	160, 112, 142, 81, 139, 0, 85, 88, 172, 158,
	106, 107, 0, 0, 0, 0, 0, 0, 0, 126,
	130, 147, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 136, 0, 0, 0, 91, 86, 124,
	0, 0, 0, 74, 0, 105, 148, 0, 816, 817,
	157, 121, 223, 159, 119, 118, 163, 166, 205, 0,
	154, 102, 111, 181, 109, 208, 204, 218, 176, 216,
	211, 198, 190, 191, 175, 0, 207, 184, 189, 183,
	202, 213, 214, 182, 228, 179, 222, 178, 89, 221,
	201, 90, 212, 217, 199, 196, 177, 215, 197, 195,
	192, 186, 0, 84, 0, 210, 219, 229, 98, 73,
	224, 225, 226, 75, 76, 0, 77, 0, 96, 97,
	94, 95, 132, 133, 167, 168, 169, 149, 92, 0,
	874, 152, 135, 174, 0, 193, 227, 206, 188, 220,
	0, 0, 0, 0, 108, 155, 171, 146, 145, 161,
	0, 0, 0, 0, 0, 187, 162, 151, 123, 164,
	100, 115, 173, 116, 117, 143, 87, 131, 203, 113,
	0, 103, 82, 110, 83, 101, 125, 185, 128, 99,
	153, 134, 170, 194, 138, 0, 209, 200, 0, 0,
	127, 156, 129, 150, 122, 144, 93, 137, 165, 114,
	141, 0, 0, 931, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 140, 160, 112, 142, 81, 139,
	0, 85, 88, 172, 158, 106, 107, 0, 0, 0,
	0, 0, 0, 0, 126, 130, 147, 120, 0, 0,
	0, 0, 0, 0, 928, 0, 104, 0, 136, 0,
	0, 0, 91, 86, 124, 0, 0, 0, 518, 0,
	105, 148, 0, 0, 0, 157, 121, 223, 159, 119,
	118, 163, 166, 205, 0, 154, 102, 111, 181, 109,
	208, 204, 218, 176, 216, 211, 198, 190, 191, 175,
	0, 207, 184, 189, 183, 202, 213, 214, 182, 228,
	179, 222, 178, 89, 221, 201, 90, 212, 217, 199,
	196, 177, 215, 197, 195, 192, 186, 0, 84, 0,
	210, 219, 229, 98, 519, 224, 225, 226, 0, 0,
	0, 0, 0, 96, 97, 94, 95, 132, 133, 167,
	168, 169, 149, 92, 0, 0, 152, 135, 174, 0,
	193, 227, 206, 188, 220, 0, 0, 0, 0, 108,
	155, 171, 146, 145, 161, 0, 0, 0, 0, 0,
	187, 162, 151, 123, 164, 100, 115, 173, 116, 117,
	143, 87, 131, 203, 113, 0, 103, 82, 110, 83,
	101, 125, 185, 128, 99, 153, 134, 170, 194, 138,
	0, 209, 200, 0, 0, 127, 156, 129, 150, 122,
	144, 93, 137, 165, 114, 141, 47, 0, 0, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 140,
	160, 112, 142, 81, 139, 0, 85, 88, 172, 158,
	106, 107, 0, 0, 0, 0, 0, 0, 0, 126,
	130, 147, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 136, 0, 0, 0, 91, 86, 124,
	0, 0, 0, 518, 0, 105, 148, 0, 0, 0,
	157, 121, 223, 159, 119, 118, 163, 166, 205, 0,
	154, 102, 111, 181, 109, 208, 204, 218, 176, 216,
	211, 198, 190, 191, 175, 0, 207, 184, 189, 183,
	202, 213, 214, 182, 228, 179, 222, 178, 89, 221,
	201, 90, 212, 217, 199, 196, 177, 215, 197, 195,
	192, 186, 0, 84, 0, 210, 219, 229, 98, 519,
	224, 225, 226, 0, 0, 0, 0, 0, 96, 97,
	94, 95, 132, 133, 167, 168, 169, 149, 92, 0,
	0, 152, 135, 174, 0, 193, 227, 206, 188, 220,
	0, 0, 0, 0, 108, 155, 171, 146, 145, 161,
	0, 0, 0, 0, 0, 187, 162, 151, 123, 164,
	100, 115, 173, 116, 117, 143, 87, 131, 203, 113,
	0, 103, 82, 110, 83, 101, 125, 185, 128, 99,
	153, 134, 170, 194, 138, 0, 209, 200, 0, 0,
	127, 156, 129, 150, 122, 144, 93, 137, 165, 114,
	141, 0, 0, 0, 343, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 140, 160, 112, 142, 81, 139,
	0, 85, 88, 172, 158, 106, 107, 0, 0, 0,
	0, 0, 0, 0, 126, 130, 147, 120, 0, 0,
	0, 0, 0, 0, 821, 0, 104, 0, 136, 0,
	0, 0, 91, 86, 124, 0, 0, 0, 518, 0,
	105, 148, 0, 0, 0, 157, 121, 223, 159, 119,
	118, 163, 166, 205, 0, 154, 102, 111, 181, 109,
	208, 204, 218, 176, 216, 211, 198, 190, 191, 175,
	0, 207, 184, 189, 183, 202, 213, 214, 182, 228,
	179, 222, 178, 89, 221, 201, 90, 212, 217, 199,
	196, 177, 215, 197, 195, 192, 186, 0, 84, 0,
	210, 219, 229, 98, 519, 224, 225, 226, 0, 0,
	0, 0, 0, 96, 97, 94, 95, 132, 133, 167,
	168, 169, 149, 92, 0, 0, 152, 135, 174, 0,
	193, 227, 206, 188, 220, 0, 0, 0, 0, 108,
	155, 171, 146, 145, 161, 0, 0, 0, 0, 0,
	187, 162, 151, 123, 164, 100, 115, 173, 116, 117,
	143, 87, 131, 203, 113, 0, 103, 82, 110, 83,
	101, 125, 185, 128, 99, 153, 134, 170, 194, 138,
	0, 209, 200, 0, 0, 127, 156, 129, 150, 122,
	144, 93, 137, 165, 114, 141, 0, 0, 0, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 140,
	160, 112, 142, 81, 139, 0, 85, 88, 172, 158,
	106, 107, 0, 0, 0, 0, 0, 0, 0, 126,
	130, 147, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 136, 0, 0, 0, 91, 86, 124,
	0, 0, 0, 518, 0, 105, 148, 0, 0, 0,
	157, 121, 223, 159, 119, 118, 163, 166, 205, 0,
	154, 102, 111, 181, 109, 208, 204, 218, 176, 216,
	211, 198, 190, 191, 175, 0, 207, 184, 189, 183,
	202, 213, 214, 182, 228, 179, 222, 178, 89, 221,
	201, 90, 212, 217, 199, 196, 177, 215, 197, 195,
	192, 186, 0, 84, 0, 210, 219, 229, 98, 519,
	224, 225, 226, 0, 0, 0, 0, 0, 96, 97,
	94, 95, 132, 133, 167, 168, 169, 149, 92, 0,
	0, 152, 135, 174, 0, 193, 227, 206, 188, 220,
	0, 0, 0, 0, 108, 155, 171, 146, 145, 161,
	0, 0, 0, 0, 0, 187, 162, 151, 123, 164,
	100, 115, 173, 116, 117, 143, 87, 131, 203, 113,
	0, 103, 82, 110, 83, 101, 125, 185, 128, 99,
	153, 134, 170, 194, 138, 0, 209, 200, 0, 0,
	127, 156, 129, 150, 122, 144, 93, 137, 165, 114,
	141, 0, 0, 0, 343, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 140, 160, 112, 142, 81, 139,
	0, 85, 88, 172, 158, 106, 107, 0, 0, 0,
	0, 0, 0, 0, 126, 130, 147, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 136, 0,
	0, 0, 91, 86, 124, 0, 0, 0, 518, 0,
	105, 148, 0, 0, 0, 157, 121, 223, 159, 119,
	118, 163, 166, 205, 0, 154, 102, 111, 181, 109,
	208, 204, 218, 176, 216, 211, 198, 190, 191, 175,
	0, 207, 184, 189, 183, 202, 213, 214, 182, 228,
	179, 222, 178, 89, 221, 201, 90, 212, 217, 199,
	196, 177, 215, 197, 195, 192, 186, 0, 84, 0,
	210, 219, 229, 98, 519, 224, 225, 226, 0, 0,
	0, 0, 0, 96, 97, 94, 95, 132, 133, 167,
	168, 169, 149, 92, 0, 0, 152, 135, 174, 0,
	193, 227, 206, 188, 220, 0, 0, 0, 0, 108,
	155, 171, 146, 145, 161, 0, 0, 0, 0, 0,
	187, 162, 151, 123, 164, 100, 115, 173, 116, 117,
	143, 87, 131, 203, 113, 0, 103, 82, 110, 83,
	101, 125, 185, 128, 99, 153, 134, 170, 194, 138,
	0, 209, 200, 0, 0, 127, 156, 129, 150, 122,
	144, 93, 137, 165, 114, 141, 0, 0, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 140,
	160, 112, 142, 81, 139, 0, 85, 88, 172, 158,
	106, 107, 0, 0, 0, 0, 0, 0, 0, 126,
	130, 147, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 136, 0, 0, 0, 91, 86, 124,
	0, 0, 0, 518, 0, 105, 148, 0, 0, 0,
	157, 121, 223, 159, 119, 118, 163, 166, 205, 0,
	154, 102, 111, 181, 109, 208, 204, 218, 176, 216,
	211, 198, 190, 191, 175, 0, 207, 184, 189, 183,
	202, 213, 214, 182, 228, 179, 222, 178, 89, 221,
	201, 90, 212, 217, 199, 196, 177, 215, 197, 195,
	192, 186, 0, 84, 0, 210, 219, 229, 98, 519,
	224, 225, 226, 0, 0, 0, 0, 0, 96, 97,
	94, 95, 132, 133, 167, 168, 169, 149, 92, 0,
	0, 152, 135, 174, 0, 193, 227, 206, 188, 220,
	0, 0, 0, 0, 108, 155, 171, 146, 145, 161,
	0, 203, 0, 0, 626, 187, 294, 0, 0, 0,
	185, 0, 293, 0, 0, 330, 194, 0, 0, 209,
	200, 0, 0, 0, 0, 323, 324, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 734, 343, 311, 310,
	312, 313, 314, 315, 0, 0, 180, 316, 317, 318,
	0, 0, 291, 304, 0, 329, 430, 429, 439, 440,
	432, 433, 434, 435, 436, 437, 438, 431, 0, 0,
	441, 0, 0, 0, 0, 301, 302, 629, 0, 0,
	0, 341, 0, 303, 0, 0, 300, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	223, 0, 0, 339, 0, 0, 205, 0, 0, 0,
	0, 181, 0, 208, 204, 218, 176, 216, 211, 198,
	190, 191, 175, 0, 207, 184, 189, 183, 202, 213,
	214, 182, 228, 179, 222, 178, 0, 221, 201, 0,
	212, 217, 199, 196, 177, 215, 197, 195, 192, 186,
	0, 0, 0, 210, 219, 229, 0, 0, 224, 225,
	226, 0, 0, 0, 0, 0, 331, 340, 337, 338,
	335, 336, 334, 333, 332, 342, 325, 326, 328, 0,
	327, 174, 0, 193, 227, 206, 188, 220, 0, 0,
	203, 0, 0, 0, 0, 294, 0, 0, 0, 185,
	0, 293, 0, 187, 330, 194, 0, 0, 209, 200,
	0, 0, 0, 0, 323, 324, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 343, 311, 310, 312,
	313, 314, 315, 0, 0, 180, 316, 317, 318, 0,
	0, 291, 304, 0, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 302, 629, 0, 0, 0,
	341, 0, 303, 0, 0, 300, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 223,
	0, 0, 339, 0, 0, 205, 0, 0, 0, 0,
	181, 0, 208, 204, 218, 176, 216, 211, 198, 190,
	191, 175, 0, 207, 184, 189, 183, 202, 213, 214,
	182, 228, 179, 222, 178, 0, 221, 201, 0, 212,
	217, 199, 196, 177, 215, 197, 195, 192, 186, 0,
	0, 0, 210, 219, 229, 0, 0, 224, 225, 226,
	0, 0, 0, 0, 0, 331, 340, 337, 338, 335,
	336, 334, 333, 332, 342, 325, 326, 328, 0, 327,
	174, 0, 193, 227, 206, 188, 220, 0, 0, 203,
	0, 0, 0, 0, 294, 0, 0, 0, 185, 0,
	293, 0, 187, 330, 194, 0, 0, 209, 200, 0,
	0, 0, 0, 323, 324, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 285, 343, 311, 310, 312, 313,
	314, 315, 0, 0, 180, 316, 317, 318, 0, 0,
	291, 304, 0, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 302, 0, 0, 0, 0, 341,
	0, 303, 0, 0, 300, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 223, 0,
	0, 339, 0, 0, 205, 0, 0, 0, 0, 181,
	0, 208, 204, 218, 176, 216, 211, 198, 190, 191,
	175, 0, 207, 184, 189, 183, 202, 213, 214, 182,
	228, 179, 222, 178, 0, 221, 201, 0, 212, 217,
	199, 196, 177, 215, 197, 195, 192, 186, 0, 0,
	0, 210, 219, 229, 0, 0, 224, 225, 226, 0,
	0, 0, 0, 0, 331, 340, 337, 338, 335, 336,
	334, 333, 332, 342, 325, 326, 328, 22, 327, 174,
	0, 193, 227, 206, 188, 220, 0, 0, 203, 0,
	0, 0, 0, 294, 0, 0, 0, 185, 0, 293,
	0, 187, 330, 194, 0, 0, 209, 200, 0, 0,
	0, 0, 323, 324, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 343, 311, 310, 312, 313, 314,
	315, 0, 0, 180, 316, 317, 318, 0, 0, 291,
	304, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 341, 0,
	303, 0, 0, 300, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 223, 0, 0,
	339, 0, 0, 205, 0, 0, 0, 0, 181, 0,
	208, 204, 218, 176, 216, 211, 198, 190, 191, 175,
	0, 207, 184, 189, 183, 202, 213, 214, 182, 228,
	179, 222, 178, 0, 221, 201, 0, 212, 217, 199,
	196, 177, 215, 197, 195, 192, 186, 0, 0, 0,
	210, 219, 229, 0, 0, 224, 225, 226, 0, 0,
	0, 0, 0, 331, 340, 337, 338, 335, 336, 334,
	333, 332, 342, 325, 326, 328, 0, 327, 174, 0,
	193, 227, 206, 188, 220, 0, 0, 203, 0, 0,
	0, 0, 294, 0, 0, 0, 185, 0, 293, 0,
	187, 330, 194, 0, 0, 209, 200, 0, 0, 0,
	0, 323, 324, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 343, 311, 310, 312, 313, 314, 315,
	0, 0, 180, 316, 317, 318, 0, 0, 291, 304,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 0, 0, 0, 0, 341, 0, 303,
	0, 0, 300, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 223, 0, 0, 339,
	0, 0, 205, 0, 0, 0, 0, 181, 0, 208,
	204, 218, 176, 216, 211, 198, 190, 191, 175, 0,
	207, 184, 189, 183, 202, 213, 214, 182, 228, 179,
	222, 178, 0, 221, 201, 0, 212, 217, 199, 196,
	177, 215, 197, 195, 192, 186, 0, 0, 0, 210,
	219, 229, 0, 0, 224, 225, 226, 0, 0, 0,
	0, 0, 331, 340, 337, 338, 335, 336, 334, 333,
	332, 342, 325, 326, 328, 0, 327, 174, 203, 193,
	227, 206, 188, 220, 0, 0, 0, 185, 0, 0,
	0, 0, 330, 194, 0, 0, 209, 200, 0, 187,
	0, 0, 323, 324, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 343, 311, 310, 312, 313, 314,
	315, 0, 0, 180, 316, 317, 318, 0, 0, 0,
	304, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 341, 0,
	303, 0, 0, 300, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 223, 0, 0,
	339, 0, 0, 205, 0, 0, 0, 0, 181, 0,
	208, 204, 218, 176, 216, 211, 198, 190, 191, 175,
	0, 207, 184, 189, 183, 202, 213, 214, 182, 228,
	179, 222, 178, 0, 221, 201, 0, 212, 217, 199,
	196, 177, 215, 197, 195, 192, 186, 0, 0, 0,
	210, 219, 229, 0, 0, 224, 225, 226, 0, 0,
	0, 0, 0, 331, 340, 337, 338, 335, 336, 334,
	333, 332, 342, 325, 326, 328, 203, 327, 174, 0,
	193, 227, 206, 188, 220, 185, 0, 0, 0, 0,
	0, 194, 0, 0, 209, 200, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 500, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 430, 429, 439, 440,
	432, 433, 434, 435, 436, 437, 438, 431, 0, 0,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 181, 0, 208, 204,
	218, 176, 216, 211, 198, 190, 191, 175, 0, 207,
	184, 189, 183, 202, 213, 214, 182, 228, 179, 222,
	178, 0, 221, 201, 0, 212, 217, 199, 196, 177,
	215, 197, 195, 192, 186, 22, 0, 0, 210, 219,
	229, 0, 0, 224, 225, 226, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 194, 372, 0, 209, 200, 174, 0, 193, 227,
	206, 188, 220, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 231, 0, 0, 0, 0, 384, 187, 0,
	0, 180, 389, 390, 391, 392, 393, 394, 395, 0,
	396, 397, 398, 399, 400, 385, 386, 387, 388, 370,
	371, 0, 0, 373, 0, 0, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 181, 0, 208, 204,
	218, 176, 216, 211, 198, 190, 191, 175, 0, 207,
	184, 189, 183, 202, 213, 214, 182, 228, 179, 222,
	178, 0, 221, 201, 0, 212, 217, 199, 196, 177,
	215, 197, 195, 192, 186, 0, 0, 203, 210, 219,
	229, 911, 0, 224, 225, 226, 185, 0, 0, 0,
	0, 0, 194, 0, 0, 209, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 193, 227,
	206, 188, 220, 231, 0, 913, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 223, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 181, 0, 208,
	204, 218, 176, 216, 211, 198, 190, 191, 175, 0,
	207, 184, 189, 183, 202, 213, 214, 182, 228, 179,
	222, 178, 0, 221, 201, 0, 212, 217, 199, 196,
	177, 215, 197, 195, 192, 186, 22, 0, 0, 210,
	219, 229, 0, 0, 224, 225, 226, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 194, 0, 0, 209, 200, 174, 0, 193,
	227, 206, 188, 220, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 500, 0, 0, 0, 0, 0, 187,
	0, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 223, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 181, 0, 208,
	204, 218, 176, 216, 211, 198, 190, 191, 175, 0,
	207, 184, 189, 183, 202, 213, 214, 182, 228, 179,
	222, 178, 0, 221, 201, 0, 212, 217, 199, 196,
	177, 215, 197, 195, 192, 186, 0, 0, 203, 210,
	219, 229, 0, 0, 224, 225, 226, 185, 0, 0,
	0, 0, 0, 194, 0, 0, 209, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 193,
	227, 206, 188, 220, 500, 0, 0, 498, 0, 0,
	499, 0, 0, 180, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 181, 0,
	208, 204, 218, 176, 216, 211, 198, 190, 191, 175,
	0, 207, 184, 189, 183, 202, 213, 214, 182, 228,
	179, 222, 178, 0, 221, 201, 0, 212, 217, 199,
	196, 177, 215, 197, 195, 192, 186, 0, 0, 203,
	210, 219, 229, 0, 0, 224, 225, 226, 185, 0,
	0, 0, 0, 0, 194, 0, 0, 209, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	193, 227, 206, 188, 220, 231, 0, 913, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 181,
	0, 208, 204, 218, 176, 216, 211, 198, 190, 191,
	175, 0, 207, 184, 189, 183, 202, 213, 214, 182,
	228, 179, 222, 178, 0, 221, 201, 0, 212, 217,
	199, 196, 177, 215, 197, 195, 192, 186, 0, 0,
	0, 210, 219, 229, 203, 0, 224, 225, 226, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 194,
	0, 0, 209, 200, 0, 0, 0, 0, 0, 174,
	0, 193, 227, 206, 188, 220, 0, 47, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 223, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 181, 0, 208, 204, 218, 176,
	216, 211, 198, 190, 191, 175, 0, 207, 184, 189,
	183, 202, 213, 214, 182, 228, 179, 222, 178, 0,
	221, 201, 0, 212, 217, 199, 196, 177, 215, 197,
	195, 192, 186, 0, 0, 203, 210, 219, 229, 0,
	0, 224, 225, 226, 185, 0, 0, 0, 0, 0,
	194, 0, 0, 209, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 193, 227, 206, 188,
	220, 500, 0, 743, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 181, 0, 208, 204, 218,
	176, 216, 211, 198, 190, 191, 175, 0, 207, 184,
	189, 183, 202, 213, 214, 182, 228, 179, 222, 178,
	0, 221, 201, 0, 212, 217, 199, 196, 177, 215,
	197, 195, 192, 186, 0, 0, 0, 210, 219, 229,
	203, 0, 224, 225, 226, 0, 0, 0, 356, 185,
	0, 0, 0, 0, 0, 194, 0, 0, 209, 200,
	0, 0, 0, 0, 0, 174, 0, 193, 227, 206,
	188, 220, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	181, 0, 208, 204, 218, 176, 216, 211, 198, 190,
	191, 175, 0, 207, 184, 189, 183, 202, 213, 214,
	182, 228, 179, 222, 178, 0, 221, 201, 0, 212,
	217, 199, 196, 177, 215, 197, 195, 192, 186, 0,
	0, 203, 210, 219, 229, 0, 0, 224, 225, 226,
	185, 0, 0, 0, 0, 0, 194, 0, 0, 209,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 193, 227, 206, 188, 220, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	223, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 181, 0, 208, 204, 218, 176, 216, 211, 198,
	190, 191, 175, 0, 207, 184, 189, 183, 202, 213,
	214, 182, 228, 179, 222, 178, 0, 221, 201, 0,
	212, 217, 199, 196, 177, 215, 197, 195, 192, 186,
	0, 0, 203, 210, 219, 229, 0, 0, 224, 225,
	226, 185, 0, 0, 0, 0, 0, 194, 0, 0,
	209, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 193, 227, 206, 188, 220, 343, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 181, 0, 208, 204, 218, 176, 216, 211,
	198, 190, 191, 175, 0, 207, 184, 189, 183, 202,
	213, 214, 182, 228, 179, 222, 178, 0, 221, 201,
	0, 212, 217, 199, 196, 177, 215, 197, 195, 192,
	186, 0, 0, 203, 210, 219, 229, 0, 0, 224,
	225, 226, 185, 0, 0, 0, 0, 0, 194, 0,
	0, 209, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 193, 227, 206, 188, 220, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 223, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 181, 0, 208, 204, 218, 176, 216,
	211, 198, 190, 191, 175, 0, 207, 184, 189, 183,
	202, 213, 214, 182, 228, 179, 222, 178, 0, 221,
	201, 0, 212, 217, 199, 196, 177, 215, 197, 195,
	192, 186, 0, 0, 0, 210, 219, 229, 0, 0,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 193, 227, 206, 188, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187,
}
var yyPact = [...]int{

	93, -1000, -172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	602, 625, -1000, -1000, -1000, -1000, -1000, 445, -8, 14,
	-41, 43, 42, 1336, 5626, -1000, -1000, 247, -163, -1000,
	-1000, -1000, -1000, -1000, 454, -1000, -1000, -1000, -1000, -1000,
	579, 600, 468, 573, 518, -1000, 14, 5626, 616, -1000,
	-149, 301, 12, 371, 12, 37, -1000, 11, 368, 11,
	5626, 5626, -1000, 613, -47, -1000, -1000, -99, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 291, 551, 3580, 3580, 602, -1000, 454, -1000,
	-1000, -1000, 541, -1000, -1000, 202, 5173, 547, 74, 5626,
	597, 376, -1000, 4030, 5626, 162, 472, 5626, 5626, 5626,
	567, 467, 5626, -1000, -1000, -1000, 5626, 5626, 5626, -1000,
	-1000, 611, -1000, -1000, -1000, -1000, -1000, 621, 102, 250,
	-1000, 3580, 1208, 440, 440, -1000, -1000, 53, -1000, -1000,
	3761, 3761, 3761, 3761, 3761, 3761, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 440,
	73, -1000, 3391, 440, 440, 440, 440, 440, 440, 3580,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, -1000, -1000, 422, -1000, 189, 579, 291,
	518, 4561, 487, -1000, -1000, 469, 5626, -1000, 5475, 2626,
	609, -152, -170, 121, 198, -73, -1000, -1000, 443, -1000,
	443, 443, 443, 443, -33, -33, -33, -33, -1000, -1000,
	-1000, -1000, -1000, 456, -1000, 443, 443, 443, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 455, 455, 455, 444,
	444, -1000, 557, 5626, -1000, 119, -1000, -1000, 5626, -1000,
	-1000, -1000, -1000, 579, -106, -1000, 523, 3580, 3580, 217,
	3580, 3580, 120, 3761, 265, 112, 3761, 3761, 3761, 3761,
	3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761,
	3761, 277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	357, -1000, 454, 292, 292, 84, 84, 84, 84, 84,
	3939, 2824, 2411, 291, 364, 127, 3391, 3013, 3013, 3580,
	3580, 3013, 574, 149, 127, 5324, -1000, 291, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3013, 3013, 3013, 3013, 3580,
	-1000, -1000, -1000, 551, -1000, 574, 599, -1000, 531, 529,
	-1000, -1000, 3013, -1000, 458, 5475, 440, -1000, 4410, -1000,
	451, -1000, 139, -1000, 69, -1000, -1000, -1000, -1000, -1000,
	602, 3580, 440, -1000, -54, 138, -1000, -1000, 449, 561,
	110, 355, -1000, -1000, 552, -1000, 176, -77, -1000, -1000,
	242, -33, -33, -1000, -1000, 78, 543, 78, 78, 78,
	281, -1000, -1000, -1000, -1000, 241, -1000, -1000, -1000, 238,
	-1000, -1000, 1766, -1000, 125, 135, 17, 4, 3, 2,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 279, 515, 120, 123, -1000, -1000, 256,
	-1000, -1000, 127, 127, 1231, -1000, -1000, -1000, -1000, 265,
	3761, 3761, 3761, 995, 1231, 2809, 1139, 509, 84, 194,
	194, 82, 82, 82, 82, 82, 391, 391, -1000, -1000,
	-1000, 291, -1000, -1000, -1000, 291, 3013, 416, -1000, -1000,
	1042, 64, 440, 60, -1000, -1000, -1000, 3580, -1000, 291,
	310, 310, 87, 168, 310, 3013, 190, -1000, 3580, 291,
	-1000, 310, 291, 310, 310, -1000, -1000, 5626, -1000, -1000,
	-1000, -1000, 426, -1000, 544, 386, 395, -1000, -1000, 3202,
	291, 362, 58, 602, 5475, 3580, 2411, 579, 127, 354,
	549, 133, 327, 5324, -1000, 316, -1000, -1000, -69, 272,
	-1000, -1000, -1000, 379, 78, 78, -1000, 314, 131, -1000,
	-1000, -1000, 347, -1000, 412, 320, -1000, -1000, -1000, -1000,
	-1000, 5626, -1000, -1000, -1000, -1000, -1000, 313, -34, 445,
	303, 301, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 995,
	1231, 1159, -1000, 3761, 3761, -1000, -1000, 310, 3013, -1000,
	-1000, 5018, -1000, -1000, 1981, 3013, 2196, 127, -1000, -1000,
	-1000, 22, 277, 22, -132, 418, 132, -1000, 3580, 171,
	-1000, -1000, -1000, -1000, -1000, -1000, 609, 4867, 560, -1000,
	440, -1000, -1000, 428, 5324, 5324, 579, -1000, 127, -1000,
	-1000, 291, -1000, -39, 227, -1000, 307, -1000, 443, -1000,
	128, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 268, 219, -1000, 218, -1000, -1000, -1000,
	542, -1000, -1000, -1000, -1000, 3761, 1231, 1231, -1000, -1000,
	-1000, -1000, 57, 291, -1000, 291, 443, 443, -1000, 443,
	444, -1000, 443, -14, 443, -17, 291, 291, 440, -129,
	-1000, 127, 3580, 607, 407, 665, -1000, -1000, -1000, 569,
	4099, 4250, 619, -1000, 440, -1000, 454, 56, -1000, -1000,
	1766, 129, -1000, -1000, 5324, -1000, 191, 556, -1000, 555,
	-1000, 378, 311, 300, 1231, 1551, -1000, -1000, -1000, 68,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3761, 291,
	257, 127, 601, 596, 4867, 4867, 4867, 4867, -1000, 510,
	508, -1000, 489, 486, 504, 5626, -1000, 290, 4099, 81,
	-1000, 4712, -1000, -1000, 5475, 395, 291, 5324, -1000, 284,
	-1000, -1000, 251, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -5, -1000, -1000, -1000, 3580, 3580, 665, 452, 614,
	-1000, -1000, -1000, -1000, 503, -1000, 502, -1000, -1000, -1000,
	-1000, -1000, 35, 24, 20, -1000, 394, -1000, -1000, -1000,
	-1000, 291, 18, -140, 127, 387, 3580, 3580, -1000, -1000,
	440, 440, 440, -1000, 512, -136, -145, 127, 127, 5324,
	5324, 5324, -1000, 490, -1000, 288, -1000, 288, 288, -138,
	-1000, 5324, -1000, -1000, -141, -1000, -146, -1000,
}
var yyPgo = [...]int{

	0, 822, 820, 819, 817, 816, 813, 69, 417, 811,
	810, 809, 808, 807, 805, 803, 802, 800, 799, 797,
	796, 791, 783, 52, 780, 774, 771, 41, 770, 44,
	769, 767, 766, 26, 326, 47, 23, 1, 765, 21,
	13, 4, 763, 761, 14, 758, 187, 757, 755, 754,
	2, 20, 753, 751, 750, 749, 42, 714, 746, 745,
	744, 741, 740, 739, 40, 3, 9, 8, 17, 738,
	18, 6, 737, 32, 735, 733, 730, 729, 29, 726,
	39, 724, 15, 38, 723, 31, 7, 27, 721, 252,
	720, 226, 249, 719, 715, 713, 45, 0, 59, 12,
	22, 709, 368, 37, 5, 695, 694, 68, 16, 25,
	19, 692, 685, 682, 680, 678, 676, 675, 166, 674,
	673, 24, 36, 670, 669, 667, 666, 665, 43, 11,
	664, 662, 661, 652, 30, 649, 33, 28, 648, 644,
	643, 10, 642, 635, 634, 50, 46, 624, 115,
}
var yyR1 = [...]int{

	0, 143, 144, 144, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 15, 15, 15, 15,
	18, 137, 139, 124, 124, 123, 123, 125, 125, 138,
	138, 138, 134, 112, 112, 112, 115, 115, 113, 113,
	113, 113, 113, 113, 113, 114, 114, 114, 114, 114,
	116, 116, 116, 116, 116, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 133,
	133, 118, 118, 128, 128, 129, 129, 129, 126, 126,
	127, 127, 130, 130, 130, 119, 119, 119, 119, 119,
	131, 131, 121, 121, 121, 122, 122, 132, 132, 132,
	132, 132, 120, 120, 135, 140, 140, 140, 140, 136,
	136, 142, 142, 141, 16, 16, 16, 16, 16, 16,
	16, 16, 17, 17, 17, 1, 19, 2, 3, 4,
	5, 5, 111, 111, 111, 20, 20, 20, 20, 20,
	20, 20, 32, 32, 21, 22, 22, 22, 22, 147,
	23, 24, 24, 25, 25, 25, 29, 29, 29, 27,
	27, 28, 28, 35, 35, 34, 34, 36, 36, 36,
	36, 101, 101, 101, 100, 100, 38, 38, 39, 39,
	40, 40, 41, 41, 41, 48, 42, 42, 42, 42,
	106, 106, 105, 105, 105, 104, 104, 43, 43, 43,
	43, 44, 44, 44, 44, 45, 45, 47, 47, 46,
	46, 49, 49, 49, 49, 50, 50, 51, 51, 37,
	37, 37, 37, 37, 37, 37, 90, 90, 53, 53,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	63, 63, 63, 63, 63, 63, 54, 54, 54, 54,
	54, 54, 54, 33, 33, 64, 64, 64, 70, 65,
	65, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 61, 61, 61, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 60, 60, 60, 60, 60, 60, 60,
	60, 148, 148, 62, 62, 62, 62, 30, 30, 30,
	30, 30, 109, 109, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 74, 74, 31,
	31, 72, 72, 73, 75, 75, 71, 71, 71, 56,
	56, 56, 56, 56, 56, 56, 58, 58, 58, 76,
	76, 77, 77, 78, 78, 79, 79, 80, 81, 81,
	81, 82, 82, 82, 82, 83, 83, 83, 55, 55,
	55, 55, 55, 55, 84, 84, 84, 84, 85, 85,
	66, 66, 68, 68, 67, 69, 86, 86, 87, 88,
	88, 91, 91, 92, 92, 89, 89, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 94, 94, 94,
	95, 95, 98, 98, 99, 99, 102, 102, 103, 103,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 145, 146, 107, 108, 108, 108,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 2, 2, 9, 4, 6,
	4, 4, 3, 0, 3, 0, 4, 0, 3, 1,
	3, 3, 7, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 4, 5, 4, 3, 3, 2, 2, 3,
	3, 2, 1, 1, 1, 3, 5, 5, 5, 3,
	3, 6, 0, 3, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 5, 5, 3,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 1, 3, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -143, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 107, 108,
	109, 131, 111, 124, 47, 207, 126, 214, 215, 217,
	24, 125, 129, 130, -145, 7, 191, 50, -144, 220,
	-78, 14, -25, 5, -23, -147, -23, -23, -23, -107,
	-137, 50, 183, 115, 114, -89, 118, 114, 115, 183,
	114, 114, -111, 173, 107, 177, 178, 180, 53, -96,
	-97, 67, 21, 23, 167, 70, 102, 15, 71, 152,
	155, 101, 192, 45, 184, 185, 182, 183, 172, 28,
	9, 24, 125, 20, 95, 109, 74, 75, 208, 128,
	22, 126, 65, 18, 48, 10, 12, 13, 119, 118,
	86, 115, 43, 7, 103, 25, 83, 39, 27, 41,
	84, 16, 186, 187, 30, 196, 97, 46, 33, 68,
	63, 49, 66, 14, 44, 212, 211, 85, 110, 191,
	42, 6, 195, 29, 124, 209, 40, 114, 73, 117,
	64, 213, 5, 120, 8, 47, 121, 188, 189, 190,
	31, 210, 72, 11, 197, 138, 132, 160, 151, 149,
	62, 127, 147, 143, 141, 26, 165, 219, 202, 142,
	136, 137, 164, 199, 32, 163, 159, 162, 135, 158,
	36, 154, 144, 17, 130, 122, 201, 140, 129, 35,
	169, 134, 156, 145, 146, 161, 133, 157, 131, 170,
	203, 153, 150, 116, 174, 175, 176, 200, 148, 171,
	-102, 53, -97, -107, -107, 56, 216, -107, -107, -107,
	-107, -107, -7, -82, 16, 15, -10, -8, -145, 6,
	19, 20, -29, 37, 38, -24, -89, -46, -102, 10,
	204, -138, -134, 53, -92, 119, 53, -92, 114, -91,
	119, 53, -91, -46, -46, -107, 10, 114, 183, -107,
	-107, 179, -107, -107, -146, 52, -83, 18, 30, -37,
	-52, 68, -57, 28, 22, -56, -53, -71, -69, -70,
	102, 91, 92, 99, 69, 103, -61, -59, -60, -62,
	55, 54, 56, 57, 58, 59, 63, 64, 65, -98,
	-102, -67, -145, 41, 42, 192, 193, 196, 194, 71,
	31, 182, 190, 189, 188, 186, 187, 184, 185, 119,
	183, 97, 191, 53, -97, -79, -80, -37, -78, -7,
	-23, 33, -27, 20, 61, -47, 25, -46, 29, 104,
	-46, 15, 52, 51, -112, -115, -117, -116, -113, -114,
	149, 150, 102, 153, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 127, 145, 146, 147, 148, 132,
	133, 134, 135, 136, 137, 138, 140, 141, 142, 143,
	144, -102, 68, 49, -46, -46, -46, 22, 49, -102,
	-46, -46, -46, -32, 10, 8, 86, 67, 66, 83,
	51, 17, -37, -54, 86, 68, 84, 85, 70, 88,
	87, 98, 91, 92, 93, 94, 95, 96, 97, 89,
	90, 101, 76, 77, 78, 79, 80, 81, 82, -90,
	-145, -70, -145, 105, 106, -57, -57, -57, -57, -57,
	-57, -145, 104, -7, -65, -37, -145, -145, -145, -145,
	-145, -145, -145, -74, -37, -145, -148, -145, -148, -148,
	-148, -148, -148, -148, -148, -145, -145, -145, -145, 51,
	-81, 23, 24, -82, -146, -29, -58, -98, 56, 59,
	53, -97, -28, 40, -55, 29, 31, -7, -145, -46,
	-86, -87, -71, -98, -102, -103, -102, -96, 107, 173,
	-51, 11, 206, -139, -124, 219, -134, -135, -140, 122,
	120, -136, 115, 27, -130, 63, 68, -126, 170, -118,
	50, -118, -118, -118, -118, -121, 152, -121, -121, -121,
	50, -118, -118, -118, -128, 50, -128, -128, -129, 50,
	-129, 22, -46, -93, 110, 219, 192, 112, 109, 113,
	108, 167, 152, 62, 28, 14, 203, 53, -46, -107,
	-107, -107, -82, 181, 35, -37, -37, -63, 63, 68,
	64, 65, -37, -37, -57, -64, -67, -70, 60, 86,
	84, 85, 70, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -109, 53,
	55, 53, -56, -56, -98, -35, 20, -34, -36, 93,
	-37, -102, -99, -103, -98, -96, -146, 51, -146, -7,
	-34, -34, -37, -37, -34, -27, -72, -73, 72, -98,
	-146, -34, -35, -34, -34, -80, -83, -88, 18, 10,
	31, 31, -34, -85, 49, -86, -66, -68, -67, -145,
	-7, -84, -98, -51, 51, 76, 104, -78, -37, -145,
	-125, 167, 76, 50, 27, -136, 53, 53, -119, 28,
	63, -127, 171, 56, -121, -121, -122, 101, 29, -122,
	-122, -122, -133, 55, 56, 56, -108, -145, -99, -96,
	-107, -94, -95, 117, 21, 115, 27, 76, 117, 123,
	123, 123, -107, 55, 36, 63, 64, 65, -64, -57,
	-57, -57, -33, 128, 67, -146, -146, -34, 51, -101,
	-100, 21, -98, 55, 104, -145, 104, -37, -146, -146,
	-146, 51, 121, 21, -146, -34, -75, -73, 74, -37,
	-146, -146, -146, -146, -146, -46, -38, 10, 26, -85,
	51, -146, -146, -146, 51, 104, -78, -87, -37, -99,
	-82, 53, -123, 28, 76, 53, -142, -141, -98, 53,
	-131, 167, 55, 56, 57, 63, 52, -122, -122, 53,
	53, 102, 52, 51, 51, 52, 51, -46, -107, 53,
	152, -137, 53, -134, -33, 67, -57, -57, -146, -36,
	-100, 93, -103, -35, -99, -110, 102, 149, 127, 147,
	143, 164, 154, 169, 145, 170, -109, -110, 197, -78,
	75, -37, 73, -51, -39, -40, -41, -42, -48, -70,
	-145, -46, 27, -68, 31, -7, -145, -98, -98, -82,
	-146, 155, 56, 52, 51, -118, -132, 122, 27, 120,
	55, 56, 56, 29, -57, 104, -146, -146, -118, -118,
	-118, -129, -118, 137, -118, 137, -146, -146, -145, -31,
	195, -37, -76, 12, 51, -43, -44, -45, 39, 43,
	45, 40, 41, 42, 46, -106, 21, -39, -145, -105,
	-104, 21, -102, 55, 8, -66, -7, 104, -108, 76,
	-141, -120, 62, 27, 27, 52, 52, 53, 93, -121,
	53, -57, -146, 55, -77, 13, 15, -40, -41, -40,
	-41, 39, 39, 39, 44, 39, 44, 39, -44, -102,
	-146, -49, 47, 118, 48, -104, -86, -146, -98, 53,
	55, -30, 86, 200, -37, -65, 49, 49, 39, 39,
	115, 115, 115, -146, 198, 46, 201, -37, -37, -145,
	-145, -145, 36, 199, 202, -50, -98, -50, -50, 36,
	-146, 51, -146, -146, 200, -98, 201, 202,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	383, 0, 169, 169, 169, 169, 603, 0, 0, 425,
	0, 0, 0, 0, 0, 603, 603, 0, 0, 603,
	603, 603, 603, 603, 0, 31, 32, 601, 1, 3,
	391, 0, 0, 173, 176, 171, 425, 0, 0, 35,
	36, 0, 423, 0, 423, 0, 426, 421, 0, 421,
	0, 0, 603, 528, 462, 603, 603, 0, 152, 153,
	154, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	164, 446, 447, 147, 148, 603, 603, 151, 165, 166,
	167, 168, 25, 395, 0, 0, 383, 27, 0, 169,
	174, 175, 179, 177, 178, 170, 0, 0, 229, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 146, 155, 0, 0, 0, 159,
	160, 162, 149, 150, 26, 602, 21, 0, 0, 392,
	239, 0, 244, 246, 0, 281, 282, 283, 284, 285,
	0, 0, 0, 0, 0, 0, 307, 308, 309, 310,
	369, 370, 371, 372, 373, 374, 375, 248, 249, 366,
	0, 415, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 331, 331, 331, 331, 331, 331, 331, 331, 0,
	0, 0, 0, -2, -2, 384, 385, 388, 391, 25,
	176, 0, 181, 180, 172, 0, 0, 228, 0, 0,
	237, 0, 43, 0, 102, 98, 54, 55, 91, 57,
	91, 91, 91, 91, 112, 112, 112, 112, 83, 84,
	85, 86, 87, 0, 70, 91, 91, 91, 74, 58,
	59, 60, 61, 62, 63, 64, 93, 93, 93, 95,
	95, 38, 0, 0, 40, 0, 142, 422, 0, 144,
	603, 603, 603, 391, 0, 396, 0, 0, 0, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 267, 268, 269, 270, 271, 272, 245,
	0, 259, 0, 0, 0, 301, 302, 303, 304, 305,
	0, 183, 0, 25, 0, 279, 0, 0, 0, 0,
	0, 0, 179, 0, 358, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 0, 183, 0, 0, 0,
	387, 389, 390, 395, 28, 179, 0, 376, 0, 0,
	442, 443, 0, 182, 408, 0, 0, -2, 0, 227,
	237, 416, 0, 366, 0, 230, 448, 449, 462, 528,
	383, 0, 0, 41, 47, 0, 50, 51, 0, 0,
	0, 0, 129, 130, 105, 103, 0, 100, 99, 56,
	0, 112, 112, 77, 78, 115, 0, 115, 115, 115,
	0, 71, 72, 73, 65, 0, 66, 67, 68, 0,
	69, 424, 604, 603, 437, 0, 434, 0, 432, 0,
	427, 428, 429, 430, 431, 433, 435, 436, 143, 156,
	157, 158, 603, 0, 0, 240, 241, 243, 260, 0,
	262, 264, 393, 394, 250, 251, 275, 276, 277, 0,
	0, 0, 0, 273, 255, 0, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 300, 342,
	343, 0, 298, 299, 306, 0, 0, 184, 185, 187,
	191, 0, 367, 0, 444, -2, 278, 0, 414, 25,
	0, 0, 0, 0, 0, 0, 364, 361, 0, 0,
	332, 0, 0, 0, 0, 386, 22, 0, 419, 420,
	377, 378, 196, 29, 0, 408, 398, 410, 412, 0,
	25, 0, 404, 383, 0, 0, 0, 391, 238, 0,
	45, 0, 0, 0, 125, 0, 127, 128, 110, 0,
	104, 53, 101, 0, 115, 115, 79, 0, 0, 80,
	81, 82, 0, 89, 0, 0, 39, 605, 606, 445,
	134, 0, 603, 438, 439, 440, 441, 0, 0, 0,
	0, 0, 161, 163, 397, 261, 263, 265, 252, 273,
	256, 0, 253, 0, 0, 247, 311, 0, 0, 188,
	192, 0, 194, 195, 0, 183, 0, 280, -2, 314,
	315, 0, 0, 0, 0, 383, 0, 362, 0, 0,
	322, 333, 334, 335, 336, 23, 237, 0, 0, 30,
	0, 413, -2, 0, 0, 0, 391, 417, 418, 367,
	34, 0, 42, 0, 0, 44, 0, 131, 91, 126,
	117, 111, 106, 107, 108, 109, 92, 75, 76, 116,
	113, 114, 88, 0, 0, 96, 0, 135, 136, 137,
	0, 139, 140, 141, 254, 0, 274, 257, 312, 186,
	193, 189, 0, 0, 368, 0, 91, 91, 347, 91,
	95, 350, 91, 352, 91, 355, 0, 0, 0, 359,
	321, 365, 0, 379, 197, 198, 200, 201, 202, 210,
	0, 212, 0, 411, 0, -2, 0, 406, 405, 33,
	604, 0, 48, 124, 0, 133, 122, 0, 119, 121,
	90, 0, 0, 0, 258, 0, 313, 316, 344, 112,
	348, 349, 351, 353, 354, 356, 318, 317, 0, 0,
	0, 363, 381, 0, 0, 0, 0, 0, 217, 0,
	0, 220, 0, 0, 0, 0, 211, 0, 0, 231,
	213, 0, 215, 216, 0, 401, 25, 0, 37, 0,
	132, 52, 0, 118, 120, 94, 97, 138, 190, 345,
	346, 337, 320, 360, 24, 0, 0, 199, 206, 0,
	209, 218, 219, 221, 0, 223, 0, 225, 226, 203,
	204, 205, 0, 0, 0, 214, 409, -2, 407, 46,
	123, 0, 0, 0, 382, 380, 0, 0, 222, 224,
	0, 0, 0, 319, 0, 0, 0, 207, 208, 0,
	0, 0, 338, 0, 341, 0, 235, 0, 0, 339,
	232, 0, 233, 234, 0, 236, 0, 340,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 220,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:263
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:268
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:269
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:273
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:295
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:303
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:307
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:320
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:324
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:330
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:341
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:352
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:364
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:374
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Set{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:392
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:398
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:405
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:413
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:420
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:431
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:438
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:444
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:448
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:453
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:462
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:466
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:477
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:487
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:497
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:665
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:670
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:674
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:679
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:683
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:691
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:695
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:701
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:709
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:718
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:722
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:741
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:749
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:753
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:762
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:771
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:775
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:779
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:784
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:793
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:797
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:805
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:814
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:818
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:824
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:830
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:834
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:838
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:858
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:862
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:874
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:878
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:883
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:888
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:892
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:896
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:900
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:904
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:911
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:919
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:924
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:946
		{
			yyVAL.statement = &Xa{}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.statement = &Explain{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:958
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:964
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:993
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:997
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.statement = &OtherRead{}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.statement = &OtherRead{}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1055
		{
			setAllowComments(yylex, true)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.bytes2 = nil
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.str = UnionStr
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.str = UnionAllStr
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = UnionDistinctStr
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.str = SQLCacheStr
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = DistinctStr
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.str = StraightJoinHint
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.selectExprs = nil
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.empty = struct{}{}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.empty = struct{}{}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.str = JoinStr
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.str = JoinStr
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.str = JoinStr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.str = StraightJoinStr
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.str = LeftJoinStr
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.str = LeftJoinStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.str = RightJoinStr
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.str = RightJoinStr
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.str = NaturalJoinStr
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.indexHints = nil
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.expr = nil
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.str = ""
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.str = IsNullStr
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.str = IsNotNullStr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.str = IsTrueStr
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.str = IsNotTrueStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.str = IsFalseStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.str = IsNotFalseStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.str = EqualStr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.str = LessThanStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.str = GreaterThanStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.str = LessEqualStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.str = GreaterEqualStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.str = NotEqualStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.expr = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1647
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1655
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1677
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 319:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.str = BooleanModeStr
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.str = QueryExpansionStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = nil
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.str = string("")
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.expr = nil
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = &NullVal{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1994
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.exprs = nil
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.orderBy = nil
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.str = AscScr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.str = AscScr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.str = DescScr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.limit = nil
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.str = ForUpdateStr
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.str = ShareModeStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2114
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2127
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.updateExprs = nil
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.byt = 0
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.byt = 1
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.byt = 0
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.byt = 1
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.str = IgnoreStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2472
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2481
		{
			decNesting(yylex)
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2486
		{
			forceEOF(yylex)
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2491
		{
			forceEOF(yylex)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2495
		{
			forceEOF(yylex)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2499
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
